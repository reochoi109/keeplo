basePath: /api/v1
definitions:
  dto.CheckPasswordRequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  dto.DuplicateEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      email:
        example: user@example.com
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsIn...
        type: string
      user_id:
        example: user-uuid-string
        type: string
    type: object
  dto.MonitorResponse:
    properties:
      created_at:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      interval_seconds:
        type: integer
      last_checked_at:
        type: string
      name:
        type: string
      target:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.RegisterMonitorRequest:
    properties:
      address:
        description: 도메인 or IP
        type: string
      interval_seconds:
        minimum: 10
        type: integer
      name:
        type: string
      port:
        description: 포트 번호
        type: string
      type:
        enum:
        - http
        - https
        - websocket
        - tcp
        type: string
    required:
    - address
    - interval_seconds
    - name
    - port
    - type
    type: object
  dto.ResponseFormat:
    properties:
      data: {}
      error_code:
        type: integer
      error_message:
        type: string
      message:
        type: string
    type: object
  dto.SignupRequest:
    properties:
      check_password:
        type: string
      email:
        type: string
      nickname:
        maxLength: 20
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - check_password
    - email
    - nickname
    - password
    type: object
  dto.UpdateMonitorRequest:
    properties:
      address:
        type: string
      interval_seconds:
        type: integer
      name:
        type: string
      port:
        type: string
      type:
        type: string
    type: object
  dto.UpdateNicknameRequest:
    properties:
      nickname:
        maxLength: 20
        minLength: 2
        type: string
    required:
    - nickname
    type: object
  dto.UpdatePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.UserResponse:
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: user-uuid-string
        type: string
    type: object
host: 10.30.8.25:8888
info:
  contact: {}
  description: keeplo
  title: keeplo API
  version: "0.1"
paths:
  /auth/duplicate:
    get:
      consumes:
      - application/json
      description: 입력한 이메일이 이미 사용 중인지 확인합니다.
      parameters:
      - description: 중복 확인할 이메일
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.DuplicateEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseFormat'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 이메일 중복 확인
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: 이메일과 비밀번호로 로그인을 수행합니다.
      parameters:
      - description: 로그인 요청 정보
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseFormat'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 로그인
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: 현재 로그인한 사용자의 정보를 반환합니다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseFormat'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 내 정보 조회
      tags:
      - auth
  /auth/me/logout:
    delete:
      consumes:
      - application/json
      description: JWT 기반 로그아웃. 클라이언트 토큰 삭제 필요.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 로그아웃
      tags:
      - auth
  /auth/me/nickname:
    put:
      consumes:
      - application/json
      description: 사용자의 닉네임을 수정합니다.
      parameters:
      - description: 변경할 닉네임
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateNicknameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 닉네임 변경
      tags:
      - auth
  /auth/me/password:
    put:
      consumes:
      - application/json
      description: 기존 비밀번호를 새로운 비밀번호로 변경합니다.
      parameters:
      - description: 비밀번호 변경 정보
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 비밀번호 변경
      tags:
      - auth
  /auth/me/resign:
    delete:
      consumes:
      - application/json
      description: 현재 로그인한 사용자를 탈퇴 처리합니다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 회원 탈퇴
      tags:
      - auth
  /auth/password:
    post:
      consumes:
      - application/json
      description: 입력한 비밀번호가 현재 비밀번호와 일치하는지 확인합니다.
      parameters:
      - description: 확인할 비밀번호
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 비밀번호 확인
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: 신규 사용자를 등록합니다.
      parameters:
      - description: 회원가입 요청 정보
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 회원 가입
      tags:
      - auth
  /log/health/{monitor_id}:
    get:
      description: 특정 모니터의 헬스 체크 이력을 조회합니다.
      parameters:
      - description: 모니터 ID
        in: path
        name: monitor_id
        required: true
        type: string
      - description: 페이지당 항목 수 (기본 50)
        in: query
        name: limit
        type: integer
      - description: 시작 위치 오프셋 (기본 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터 헬스 로그 조회
      tags:
      - log
  /log/health/{monitor_id}/errors:
    get:
      description: 특정 모니터의 실패 응답 요약을 조회합니다.
      parameters:
      - description: 모니터 ID
        in: path
        name: monitor_id
        required: true
        type: string
      - description: '조회 시작 시각 (RFC3339 형식, 예: 2025-07-17T00:00:00Z)'
        in: query
        name: from
        type: string
      - description: '조회 종료 시각 (RFC3339 형식, 예: 2025-07-17T23:59:59Z)'
        in: query
        name: to
        type: string
      - description: '특정 상태코드 필터 (예: 500)'
        in: query
        name: status_code
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 헬스 체크 실패 요약
      tags:
      - log
  /log/health/{monitor_id}/timeseries:
    get:
      description: 특정 모니터의 응답 시간 차트를 조회합니다.
      parameters:
      - description: 모니터 ID
        in: path
        name: monitor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 응답 시간 시계열 데이터
      tags:
      - log
  /log/notifications/{monitor_id}:
    get:
      description: 특정 모니터의 알림 발송 이력을 조회합니다.
      parameters:
      - description: 모니터 ID
        in: path
        name: monitor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 알림 전송 이력
      tags:
      - log
  /monitor:
    get:
      consumes:
      - application/json
      description: 사용자가 등록한 모든 모니터링 항목을 조회합니다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseFormat'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.MonitorResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 목록 조회
      tags:
      - monitor
    post:
      consumes:
      - application/json
      description: 모니터링 항목을 신규 등록합니다.
      parameters:
      - description: 신규 모니터링 등록 요청
        in: body
        name: monitor
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterMonitorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 추가
      tags:
      - monitor
  /monitor/{id}:
    delete:
      consumes:
      - application/json
      description: 특정 모니터링 항목을 삭제합니다.
      parameters:
      - description: 모니터링 고유 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 삭제
      tags:
      - monitor
    get:
      consumes:
      - application/json
      description: 특정 모니터링 항목의 상세 정보를 조회합니다.
      parameters:
      - description: 모니터링 고유 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseFormat'
            - properties:
                data:
                  $ref: '#/definitions/dto.MonitorResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 상세 조회
      tags:
      - monitor
    put:
      consumes:
      - application/json
      description: 기존 모니터링 항목의 정보를 수정합니다.
      parameters:
      - description: 모니터링 고유 ID
        in: path
        name: id
        required: true
        type: string
      - description: 수정할 정보
        in: body
        name: monitor
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMonitorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 수정
      tags:
      - monitor
  /monitor/{id}/toggle:
    patch:
      consumes:
      - application/json
      description: 모니터링 항목을 활성화 또는 비활성화합니다.
      parameters:
      - description: 모니터 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 ON/OFF 전환
      tags:
      - monitor
  /monitor/{id}/trigger:
    post:
      description: 선택한 모니터링 항목을 즉시 테스트 실행합니다.
      parameters:
      - description: 모니터 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 모니터링 수동 실행
      tags:
      - monitor
  /monitor/protocols:
    get:
      description: 서버에서 지원하는 모니터링 프로토콜 목록을 반환합니다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseFormat'
      summary: 지원 프로토콜 조회
      tags:
      - monitor
schemes:
- http
swagger: "2.0"
